// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: super_admin_svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuperAdminServicesClient is the client API for SuperAdminServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperAdminServicesClient interface {
	RegisterSuperAdmin(ctx context.Context, in *RegisterSuperAdminRequest, opts ...grpc.CallOption) (*RegisterSuperAdminResponse, error)
}

type superAdminServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperAdminServicesClient(cc grpc.ClientConnInterface) SuperAdminServicesClient {
	return &superAdminServicesClient{cc}
}

func (c *superAdminServicesClient) RegisterSuperAdmin(ctx context.Context, in *RegisterSuperAdminRequest, opts ...grpc.CallOption) (*RegisterSuperAdminResponse, error) {
	out := new(RegisterSuperAdminResponse)
	err := c.cc.Invoke(ctx, "/pb.SuperAdminServices/RegisterSuperAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperAdminServicesServer is the server API for SuperAdminServices service.
// All implementations should embed UnimplementedSuperAdminServicesServer
// for forward compatibility
type SuperAdminServicesServer interface {
	RegisterSuperAdmin(context.Context, *RegisterSuperAdminRequest) (*RegisterSuperAdminResponse, error)
}

// UnimplementedSuperAdminServicesServer should be embedded to have forward compatible implementations.
type UnimplementedSuperAdminServicesServer struct {
}

func (UnimplementedSuperAdminServicesServer) RegisterSuperAdmin(context.Context, *RegisterSuperAdminRequest) (*RegisterSuperAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSuperAdmin not implemented")
}

// UnsafeSuperAdminServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperAdminServicesServer will
// result in compilation errors.
type UnsafeSuperAdminServicesServer interface {
	mustEmbedUnimplementedSuperAdminServicesServer()
}

func RegisterSuperAdminServicesServer(s grpc.ServiceRegistrar, srv SuperAdminServicesServer) {
	s.RegisterService(&SuperAdminServices_ServiceDesc, srv)
}

func _SuperAdminServices_RegisterSuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSuperAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServicesServer).RegisterSuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SuperAdminServices/RegisterSuperAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServicesServer).RegisterSuperAdmin(ctx, req.(*RegisterSuperAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperAdminServices_ServiceDesc is the grpc.ServiceDesc for SuperAdminServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperAdminServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SuperAdminServices",
	HandlerType: (*SuperAdminServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSuperAdmin",
			Handler:    _SuperAdminServices_RegisterSuperAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "super_admin_svc.proto",
}
