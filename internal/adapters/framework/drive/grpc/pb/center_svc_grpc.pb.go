// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CenterServicesClient is the client API for CenterServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterServicesClient interface {
	GetAllCenters(ctx context.Context, in *GetAllCetersRequest, opts ...grpc.CallOption) (*GetAllCetersResponse, error)
}

type centerServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterServicesClient(cc grpc.ClientConnInterface) CenterServicesClient {
	return &centerServicesClient{cc}
}

func (c *centerServicesClient) GetAllCenters(ctx context.Context, in *GetAllCetersRequest, opts ...grpc.CallOption) (*GetAllCetersResponse, error) {
	out := new(GetAllCetersResponse)
	err := c.cc.Invoke(ctx, "/pb.CenterServices/GetAllCenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServicesServer is the server API for CenterServices service.
// All implementations should embed UnimplementedCenterServicesServer
// for forward compatibility
type CenterServicesServer interface {
	GetAllCenters(context.Context, *GetAllCetersRequest) (*GetAllCetersResponse, error)
}

// UnimplementedCenterServicesServer should be embedded to have forward compatible implementations.
type UnimplementedCenterServicesServer struct {
}

func (UnimplementedCenterServicesServer) GetAllCenters(context.Context, *GetAllCetersRequest) (*GetAllCetersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCenters not implemented")
}

// UnsafeCenterServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterServicesServer will
// result in compilation errors.
type UnsafeCenterServicesServer interface {
	mustEmbedUnimplementedCenterServicesServer()
}

func RegisterCenterServicesServer(s grpc.ServiceRegistrar, srv CenterServicesServer) {
	s.RegisterService(&CenterServices_ServiceDesc, srv)
}

func _CenterServices_GetAllCenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCetersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServicesServer).GetAllCenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CenterServices/GetAllCenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServicesServer).GetAllCenters(ctx, req.(*GetAllCetersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CenterServices_ServiceDesc is the grpc.ServiceDesc for CenterServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CenterServices",
	HandlerType: (*CenterServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCenters",
			Handler:    _CenterServices_GetAllCenters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "center_svc.proto",
}
