// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: center_admin_svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CenterAdminServicesClient is the client API for CenterAdminServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterAdminServicesClient interface {
	RegisterCenterAdmin(ctx context.Context, in *RegisterCenterAdminRequest, opts ...grpc.CallOption) (*RegisterCenterAdminResponse, error)
	GetAllCenterAdmins(ctx context.Context, in *GetAllCenterAdminsRequest, opts ...grpc.CallOption) (*GetAllCenterAdminsResponse, error)
	GetAllCenterAdminsByName(ctx context.Context, in *GetAllCenterAdminsByNameRequest, opts ...grpc.CallOption) (*GetAllCenterAdminsResponse, error)
}

type centerAdminServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterAdminServicesClient(cc grpc.ClientConnInterface) CenterAdminServicesClient {
	return &centerAdminServicesClient{cc}
}

func (c *centerAdminServicesClient) RegisterCenterAdmin(ctx context.Context, in *RegisterCenterAdminRequest, opts ...grpc.CallOption) (*RegisterCenterAdminResponse, error) {
	out := new(RegisterCenterAdminResponse)
	err := c.cc.Invoke(ctx, "/pb.CenterAdminServices/RegisterCenterAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerAdminServicesClient) GetAllCenterAdmins(ctx context.Context, in *GetAllCenterAdminsRequest, opts ...grpc.CallOption) (*GetAllCenterAdminsResponse, error) {
	out := new(GetAllCenterAdminsResponse)
	err := c.cc.Invoke(ctx, "/pb.CenterAdminServices/GetAllCenterAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerAdminServicesClient) GetAllCenterAdminsByName(ctx context.Context, in *GetAllCenterAdminsByNameRequest, opts ...grpc.CallOption) (*GetAllCenterAdminsResponse, error) {
	out := new(GetAllCenterAdminsResponse)
	err := c.cc.Invoke(ctx, "/pb.CenterAdminServices/GetAllCenterAdminsByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterAdminServicesServer is the server API for CenterAdminServices service.
// All implementations should embed UnimplementedCenterAdminServicesServer
// for forward compatibility
type CenterAdminServicesServer interface {
	RegisterCenterAdmin(context.Context, *RegisterCenterAdminRequest) (*RegisterCenterAdminResponse, error)
	GetAllCenterAdmins(context.Context, *GetAllCenterAdminsRequest) (*GetAllCenterAdminsResponse, error)
	GetAllCenterAdminsByName(context.Context, *GetAllCenterAdminsByNameRequest) (*GetAllCenterAdminsResponse, error)
}

// UnimplementedCenterAdminServicesServer should be embedded to have forward compatible implementations.
type UnimplementedCenterAdminServicesServer struct {
}

func (UnimplementedCenterAdminServicesServer) RegisterCenterAdmin(context.Context, *RegisterCenterAdminRequest) (*RegisterCenterAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCenterAdmin not implemented")
}
func (UnimplementedCenterAdminServicesServer) GetAllCenterAdmins(context.Context, *GetAllCenterAdminsRequest) (*GetAllCenterAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCenterAdmins not implemented")
}
func (UnimplementedCenterAdminServicesServer) GetAllCenterAdminsByName(context.Context, *GetAllCenterAdminsByNameRequest) (*GetAllCenterAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCenterAdminsByName not implemented")
}

// UnsafeCenterAdminServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterAdminServicesServer will
// result in compilation errors.
type UnsafeCenterAdminServicesServer interface {
	mustEmbedUnimplementedCenterAdminServicesServer()
}

func RegisterCenterAdminServicesServer(s grpc.ServiceRegistrar, srv CenterAdminServicesServer) {
	s.RegisterService(&CenterAdminServices_ServiceDesc, srv)
}

func _CenterAdminServices_RegisterCenterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCenterAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterAdminServicesServer).RegisterCenterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CenterAdminServices/RegisterCenterAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterAdminServicesServer).RegisterCenterAdmin(ctx, req.(*RegisterCenterAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterAdminServices_GetAllCenterAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCenterAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterAdminServicesServer).GetAllCenterAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CenterAdminServices/GetAllCenterAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterAdminServicesServer).GetAllCenterAdmins(ctx, req.(*GetAllCenterAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterAdminServices_GetAllCenterAdminsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCenterAdminsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterAdminServicesServer).GetAllCenterAdminsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CenterAdminServices/GetAllCenterAdminsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterAdminServicesServer).GetAllCenterAdminsByName(ctx, req.(*GetAllCenterAdminsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CenterAdminServices_ServiceDesc is the grpc.ServiceDesc for CenterAdminServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterAdminServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CenterAdminServices",
	HandlerType: (*CenterAdminServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCenterAdmin",
			Handler:    _CenterAdminServices_RegisterCenterAdmin_Handler,
		},
		{
			MethodName: "GetAllCenterAdmins",
			Handler:    _CenterAdminServices_GetAllCenterAdmins_Handler,
		},
		{
			MethodName: "GetAllCenterAdminsByName",
			Handler:    _CenterAdminServices_GetAllCenterAdminsByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "center_admin_svc.proto",
}
