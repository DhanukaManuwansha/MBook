// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BedServiceClient is the client API for BedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BedServiceClient interface {
	GetBedsByWard(ctx context.Context, in *GetBedsbyWardRequest, opts ...grpc.CallOption) (*GetBedsbyWardResponse, error)
}

type bedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBedServiceClient(cc grpc.ClientConnInterface) BedServiceClient {
	return &bedServiceClient{cc}
}

func (c *bedServiceClient) GetBedsByWard(ctx context.Context, in *GetBedsbyWardRequest, opts ...grpc.CallOption) (*GetBedsbyWardResponse, error) {
	out := new(GetBedsbyWardResponse)
	err := c.cc.Invoke(ctx, "/pb.BedService/GetBedsByWard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BedServiceServer is the server API for BedService service.
// All implementations should embed UnimplementedBedServiceServer
// for forward compatibility
type BedServiceServer interface {
	GetBedsByWard(context.Context, *GetBedsbyWardRequest) (*GetBedsbyWardResponse, error)
}

// UnimplementedBedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBedServiceServer struct {
}

func (UnimplementedBedServiceServer) GetBedsByWard(context.Context, *GetBedsbyWardRequest) (*GetBedsbyWardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBedsByWard not implemented")
}

// UnsafeBedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BedServiceServer will
// result in compilation errors.
type UnsafeBedServiceServer interface {
	mustEmbedUnimplementedBedServiceServer()
}

func RegisterBedServiceServer(s grpc.ServiceRegistrar, srv BedServiceServer) {
	s.RegisterService(&BedService_ServiceDesc, srv)
}

func _BedService_GetBedsByWard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBedsbyWardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BedServiceServer).GetBedsByWard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BedService/GetBedsByWard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BedServiceServer).GetBedsByWard(ctx, req.(*GetBedsbyWardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BedService_ServiceDesc is the grpc.ServiceDesc for BedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BedService",
	HandlerType: (*BedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBedsByWard",
			Handler:    _BedService_GetBedsByWard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bed_svc.proto",
}
