// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PatientServiceClient is the client API for PatientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientServiceClient interface {
	GetPatients(ctx context.Context, in *GetPatientsParameters, opts ...grpc.CallOption) (*PatientListResult, error)
	GetPatientsByNIC(ctx context.Context, in *GetPatientsByNICParameters, opts ...grpc.CallOption) (*PatientListResult, error)
	GetPatientsByTellNo(ctx context.Context, in *GetPatientsByTellNoParameters, opts ...grpc.CallOption) (*PatientListResult, error)
	GetPatientsByName(ctx context.Context, in *GetPatientsByNameParameters, opts ...grpc.CallOption) (*PatientListResult, error)
	GetPatientById(ctx context.Context, in *GetPatientsByIDParameters, opts ...grpc.CallOption) (*PatientResult, error)
}

type patientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientServiceClient(cc grpc.ClientConnInterface) PatientServiceClient {
	return &patientServiceClient{cc}
}

func (c *patientServiceClient) GetPatients(ctx context.Context, in *GetPatientsParameters, opts ...grpc.CallOption) (*PatientListResult, error) {
	out := new(PatientListResult)
	err := c.cc.Invoke(ctx, "/pb.PatientService/GetPatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientsByNIC(ctx context.Context, in *GetPatientsByNICParameters, opts ...grpc.CallOption) (*PatientListResult, error) {
	out := new(PatientListResult)
	err := c.cc.Invoke(ctx, "/pb.PatientService/GetPatientsByNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientsByTellNo(ctx context.Context, in *GetPatientsByTellNoParameters, opts ...grpc.CallOption) (*PatientListResult, error) {
	out := new(PatientListResult)
	err := c.cc.Invoke(ctx, "/pb.PatientService/GetPatientsByTellNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientsByName(ctx context.Context, in *GetPatientsByNameParameters, opts ...grpc.CallOption) (*PatientListResult, error) {
	out := new(PatientListResult)
	err := c.cc.Invoke(ctx, "/pb.PatientService/GetPatientsByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientById(ctx context.Context, in *GetPatientsByIDParameters, opts ...grpc.CallOption) (*PatientResult, error) {
	out := new(PatientResult)
	err := c.cc.Invoke(ctx, "/pb.PatientService/GetPatientById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientServiceServer is the server API for PatientService service.
// All implementations should embed UnimplementedPatientServiceServer
// for forward compatibility
type PatientServiceServer interface {
	GetPatients(context.Context, *GetPatientsParameters) (*PatientListResult, error)
	GetPatientsByNIC(context.Context, *GetPatientsByNICParameters) (*PatientListResult, error)
	GetPatientsByTellNo(context.Context, *GetPatientsByTellNoParameters) (*PatientListResult, error)
	GetPatientsByName(context.Context, *GetPatientsByNameParameters) (*PatientListResult, error)
	GetPatientById(context.Context, *GetPatientsByIDParameters) (*PatientResult, error)
}

// UnimplementedPatientServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPatientServiceServer struct {
}

func (UnimplementedPatientServiceServer) GetPatients(context.Context, *GetPatientsParameters) (*PatientListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatients not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientsByNIC(context.Context, *GetPatientsByNICParameters) (*PatientListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByNIC not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientsByTellNo(context.Context, *GetPatientsByTellNoParameters) (*PatientListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByTellNo not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientsByName(context.Context, *GetPatientsByNameParameters) (*PatientListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByName not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientById(context.Context, *GetPatientsByIDParameters) (*PatientResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientById not implemented")
}

// UnsafePatientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientServiceServer will
// result in compilation errors.
type UnsafePatientServiceServer interface {
	mustEmbedUnimplementedPatientServiceServer()
}

func RegisterPatientServiceServer(s grpc.ServiceRegistrar, srv PatientServiceServer) {
	s.RegisterService(&PatientService_ServiceDesc, srv)
}

func _PatientService_GetPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PatientService/GetPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatients(ctx, req.(*GetPatientsParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientsByNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByNICParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientsByNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PatientService/GetPatientsByNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientsByNIC(ctx, req.(*GetPatientsByNICParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientsByTellNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByTellNoParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientsByTellNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PatientService/GetPatientsByTellNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientsByTellNo(ctx, req.(*GetPatientsByTellNoParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByNameParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PatientService/GetPatientsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientsByName(ctx, req.(*GetPatientsByNameParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByIDParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PatientService/GetPatientById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientById(ctx, req.(*GetPatientsByIDParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientService_ServiceDesc is the grpc.ServiceDesc for PatientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PatientService",
	HandlerType: (*PatientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPatients",
			Handler:    _PatientService_GetPatients_Handler,
		},
		{
			MethodName: "GetPatientsByNIC",
			Handler:    _PatientService_GetPatientsByNIC_Handler,
		},
		{
			MethodName: "GetPatientsByTellNo",
			Handler:    _PatientService_GetPatientsByTellNo_Handler,
		},
		{
			MethodName: "GetPatientsByName",
			Handler:    _PatientService_GetPatientsByName_Handler,
		},
		{
			MethodName: "GetPatientById",
			Handler:    _PatientService_GetPatientById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "patient_svc.proto",
}
