// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WardServiceClient is the client API for WardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WardServiceClient interface {
	GetWardsByCenter(ctx context.Context, in *GetWardsByCenterRequest, opts ...grpc.CallOption) (*GetWardsByCenterResponse, error)
}

type wardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWardServiceClient(cc grpc.ClientConnInterface) WardServiceClient {
	return &wardServiceClient{cc}
}

func (c *wardServiceClient) GetWardsByCenter(ctx context.Context, in *GetWardsByCenterRequest, opts ...grpc.CallOption) (*GetWardsByCenterResponse, error) {
	out := new(GetWardsByCenterResponse)
	err := c.cc.Invoke(ctx, "/pb.WardService/GetWardsByCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WardServiceServer is the server API for WardService service.
// All implementations should embed UnimplementedWardServiceServer
// for forward compatibility
type WardServiceServer interface {
	GetWardsByCenter(context.Context, *GetWardsByCenterRequest) (*GetWardsByCenterResponse, error)
}

// UnimplementedWardServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWardServiceServer struct {
}

func (UnimplementedWardServiceServer) GetWardsByCenter(context.Context, *GetWardsByCenterRequest) (*GetWardsByCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWardsByCenter not implemented")
}

// UnsafeWardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WardServiceServer will
// result in compilation errors.
type UnsafeWardServiceServer interface {
	mustEmbedUnimplementedWardServiceServer()
}

func RegisterWardServiceServer(s grpc.ServiceRegistrar, srv WardServiceServer) {
	s.RegisterService(&WardService_ServiceDesc, srv)
}

func _WardService_GetWardsByCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWardsByCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).GetWardsByCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WardService/GetWardsByCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).GetWardsByCenter(ctx, req.(*GetWardsByCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WardService_ServiceDesc is the grpc.ServiceDesc for WardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WardService",
	HandlerType: (*WardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWardsByCenter",
			Handler:    _WardService_GetWardsByCenter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ward_svc.proto",
}
