// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NurseNoteServiceClient is the client API for NurseNoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NurseNoteServiceClient interface {
	UpdateNurseNote(ctx context.Context, in *UpdateNurseNoteParameters, opts ...grpc.CallOption) (*UpdatedNurseNoteResult, error)
	GetAllNurseNotes(ctx context.Context, in *PatientIdParam, opts ...grpc.CallOption) (*GetAllNurseNotesResult, error)
	AddNurseNote(ctx context.Context, in *AddNurseNoteParameters, opts ...grpc.CallOption) (*AddedNurseNoteResults, error)
	GetLatestNurseNotes(ctx context.Context, in *PatientIdParam, opts ...grpc.CallOption) (*GetAllLatestNurseNotesResult, error)
}

type nurseNoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNurseNoteServiceClient(cc grpc.ClientConnInterface) NurseNoteServiceClient {
	return &nurseNoteServiceClient{cc}
}

func (c *nurseNoteServiceClient) UpdateNurseNote(ctx context.Context, in *UpdateNurseNoteParameters, opts ...grpc.CallOption) (*UpdatedNurseNoteResult, error) {
	out := new(UpdatedNurseNoteResult)
	err := c.cc.Invoke(ctx, "/pb.NurseNoteService/UpdateNurseNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseNoteServiceClient) GetAllNurseNotes(ctx context.Context, in *PatientIdParam, opts ...grpc.CallOption) (*GetAllNurseNotesResult, error) {
	out := new(GetAllNurseNotesResult)
	err := c.cc.Invoke(ctx, "/pb.NurseNoteService/getAllNurseNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseNoteServiceClient) AddNurseNote(ctx context.Context, in *AddNurseNoteParameters, opts ...grpc.CallOption) (*AddedNurseNoteResults, error) {
	out := new(AddedNurseNoteResults)
	err := c.cc.Invoke(ctx, "/pb.NurseNoteService/AddNurseNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseNoteServiceClient) GetLatestNurseNotes(ctx context.Context, in *PatientIdParam, opts ...grpc.CallOption) (*GetAllLatestNurseNotesResult, error) {
	out := new(GetAllLatestNurseNotesResult)
	err := c.cc.Invoke(ctx, "/pb.NurseNoteService/getLatestNurseNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NurseNoteServiceServer is the server API for NurseNoteService service.
// All implementations should embed UnimplementedNurseNoteServiceServer
// for forward compatibility
type NurseNoteServiceServer interface {
	UpdateNurseNote(context.Context, *UpdateNurseNoteParameters) (*UpdatedNurseNoteResult, error)
	GetAllNurseNotes(context.Context, *PatientIdParam) (*GetAllNurseNotesResult, error)
	AddNurseNote(context.Context, *AddNurseNoteParameters) (*AddedNurseNoteResults, error)
	GetLatestNurseNotes(context.Context, *PatientIdParam) (*GetAllLatestNurseNotesResult, error)
}

// UnimplementedNurseNoteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNurseNoteServiceServer struct {
}

func (UnimplementedNurseNoteServiceServer) UpdateNurseNote(context.Context, *UpdateNurseNoteParameters) (*UpdatedNurseNoteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNurseNote not implemented")
}
func (UnimplementedNurseNoteServiceServer) GetAllNurseNotes(context.Context, *PatientIdParam) (*GetAllNurseNotesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNurseNotes not implemented")
}
func (UnimplementedNurseNoteServiceServer) AddNurseNote(context.Context, *AddNurseNoteParameters) (*AddedNurseNoteResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNurseNote not implemented")
}
func (UnimplementedNurseNoteServiceServer) GetLatestNurseNotes(context.Context, *PatientIdParam) (*GetAllLatestNurseNotesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestNurseNotes not implemented")
}

// UnsafeNurseNoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NurseNoteServiceServer will
// result in compilation errors.
type UnsafeNurseNoteServiceServer interface {
	mustEmbedUnimplementedNurseNoteServiceServer()
}

func RegisterNurseNoteServiceServer(s grpc.ServiceRegistrar, srv NurseNoteServiceServer) {
	s.RegisterService(&NurseNoteService_ServiceDesc, srv)
}

func _NurseNoteService_UpdateNurseNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNurseNoteParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseNoteServiceServer).UpdateNurseNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NurseNoteService/UpdateNurseNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseNoteServiceServer).UpdateNurseNote(ctx, req.(*UpdateNurseNoteParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseNoteService_GetAllNurseNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseNoteServiceServer).GetAllNurseNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NurseNoteService/getAllNurseNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseNoteServiceServer).GetAllNurseNotes(ctx, req.(*PatientIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseNoteService_AddNurseNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNurseNoteParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseNoteServiceServer).AddNurseNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NurseNoteService/AddNurseNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseNoteServiceServer).AddNurseNote(ctx, req.(*AddNurseNoteParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseNoteService_GetLatestNurseNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseNoteServiceServer).GetLatestNurseNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NurseNoteService/getLatestNurseNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseNoteServiceServer).GetLatestNurseNotes(ctx, req.(*PatientIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

// NurseNoteService_ServiceDesc is the grpc.ServiceDesc for NurseNoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NurseNoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NurseNoteService",
	HandlerType: (*NurseNoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateNurseNote",
			Handler:    _NurseNoteService_UpdateNurseNote_Handler,
		},
		{
			MethodName: "getAllNurseNotes",
			Handler:    _NurseNoteService_GetAllNurseNotes_Handler,
		},
		{
			MethodName: "AddNurseNote",
			Handler:    _NurseNoteService_AddNurseNote_Handler,
		},
		{
			MethodName: "getLatestNurseNotes",
			Handler:    _NurseNoteService_GetLatestNurseNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nurseNote_svc.proto",
}
