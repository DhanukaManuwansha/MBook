// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: drugsummery.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getAllDrugSummery = `-- name: GetAllDrugSummery :many
SELECT drugsummery_id, summery_date, summery_status, first_dose_is_given, second_dose_is_given, third_dose_is_given, fourth_dose_is_given, created_at, drugorder_id, patient_id FROM "DrugSummery"
WHERE "patient_id"=$1
ORDER BY "created_at" DESC
`

func (q *Queries) GetAllDrugSummery(ctx context.Context, patientID string) ([]DrugSummery, error) {
	rows, err := q.db.QueryContext(ctx, getAllDrugSummery, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DrugSummery
	for rows.Next() {
		var i DrugSummery
		if err := rows.Scan(
			&i.DrugsummeryID,
			&i.SummeryDate,
			&i.SummeryStatus,
			&i.FirstDoseIsGiven,
			&i.SecondDoseIsGiven,
			&i.ThirdDoseIsGiven,
			&i.FourthDoseIsGiven,
			&i.CreatedAt,
			&i.DrugorderID,
			&i.PatientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDrugSummeryOfADrug = `-- name: GetAllDrugSummeryOfADrug :many
SELECT "Drug".drug_name,"DrugOrder".dosage ,"DrugOrder".dose,"DrugOrder".frequency, "DrugOrder".givendate, "DrugOrder".giveuntil,"DrugSummery".drugsummery_id,"DrugSummery".summery_date, "DrugSummery".summery_status,"DrugSummery".first_dose_is_given,"DrugSummery".second_dose_is_given,"DrugSummery".third_dose_is_given,"DrugSummery".fourth_dose_is_given,"DrugSummery".drugorder_id,"DrugSummery".patient_id
FROM "DrugSummery" INNER JOIN "DrugOrder"
on "DrugSummery".drugorder_id = "DrugOrder".drugorder_id
Inner Join "Prescription"
on "Prescription".prescription_id = "DrugOrder".prescription_id
Inner Join "Drug"
on "Drug".drug_id = "DrugOrder".drug_id
WHERE "Prescription".patient_id=$1  AND  "Prescription".active_status=TRUE AND "DrugSummery".summery_date>=$2 AND "DrugSummery".summery_date<=$3
`

type GetAllDrugSummeryOfADrugParams struct {
	PatientID     string    `json:"patient_id"`
	SummeryDate   time.Time `json:"summery_date"`
	SummeryDate_2 time.Time `json:"summery_date_2"`
}

type GetAllDrugSummeryOfADrugRow struct {
	DrugName          string        `json:"drug_name"`
	Dosage            string        `json:"dosage"`
	Dose              string        `json:"dose"`
	Frequency         int32         `json:"frequency"`
	Givendate         time.Time     `json:"givendate"`
	Giveuntil         time.Time     `json:"giveuntil"`
	DrugsummeryID     int64         `json:"drugsummery_id"`
	SummeryDate       time.Time     `json:"summery_date"`
	SummeryStatus     bool          `json:"summery_status"`
	FirstDoseIsGiven  int32         `json:"first_dose_is_given"`
	SecondDoseIsGiven int32         `json:"second_dose_is_given"`
	ThirdDoseIsGiven  int32         `json:"third_dose_is_given"`
	FourthDoseIsGiven int32         `json:"fourth_dose_is_given"`
	DrugorderID       sql.NullInt64 `json:"drugorder_id"`
	PatientID         string        `json:"patient_id"`
}

func (q *Queries) GetAllDrugSummeryOfADrug(ctx context.Context, arg GetAllDrugSummeryOfADrugParams) ([]GetAllDrugSummeryOfADrugRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllDrugSummeryOfADrug, arg.PatientID, arg.SummeryDate, arg.SummeryDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDrugSummeryOfADrugRow
	for rows.Next() {
		var i GetAllDrugSummeryOfADrugRow
		if err := rows.Scan(
			&i.DrugName,
			&i.Dosage,
			&i.Dose,
			&i.Frequency,
			&i.Givendate,
			&i.Giveuntil,
			&i.DrugsummeryID,
			&i.SummeryDate,
			&i.SummeryStatus,
			&i.FirstDoseIsGiven,
			&i.SecondDoseIsGiven,
			&i.ThirdDoseIsGiven,
			&i.FourthDoseIsGiven,
			&i.DrugorderID,
			&i.PatientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDrugSummery = `-- name: UpdateDrugSummery :one
UPDATE "DrugSummery"
SET "summery_date" = $2, "summery_status" = $3 ,"first_dose_is_given" = $4, "second_dose_is_given" = $5 , "third_dose_is_given" =$6, "fourth_dose_is_given" = $7, "drugorder_id" = $8, "patient_id" = $9
WHERE "drugsummery_id" = $1
RETURNING drugsummery_id, summery_date, summery_status, first_dose_is_given, second_dose_is_given, third_dose_is_given, fourth_dose_is_given, created_at, drugorder_id, patient_id
`

type UpdateDrugSummeryParams struct {
	DrugsummeryID     int64         `json:"drugsummery_id"`
	SummeryDate       time.Time     `json:"summery_date"`
	SummeryStatus     bool          `json:"summery_status"`
	FirstDoseIsGiven  int32         `json:"first_dose_is_given"`
	SecondDoseIsGiven int32         `json:"second_dose_is_given"`
	ThirdDoseIsGiven  int32         `json:"third_dose_is_given"`
	FourthDoseIsGiven int32         `json:"fourth_dose_is_given"`
	DrugorderID       sql.NullInt64 `json:"drugorder_id"`
	PatientID         string        `json:"patient_id"`
}

func (q *Queries) UpdateDrugSummery(ctx context.Context, arg UpdateDrugSummeryParams) (DrugSummery, error) {
	row := q.db.QueryRowContext(ctx, updateDrugSummery,
		arg.DrugsummeryID,
		arg.SummeryDate,
		arg.SummeryStatus,
		arg.FirstDoseIsGiven,
		arg.SecondDoseIsGiven,
		arg.ThirdDoseIsGiven,
		arg.FourthDoseIsGiven,
		arg.DrugorderID,
		arg.PatientID,
	)
	var i DrugSummery
	err := row.Scan(
		&i.DrugsummeryID,
		&i.SummeryDate,
		&i.SummeryStatus,
		&i.FirstDoseIsGiven,
		&i.SecondDoseIsGiven,
		&i.ThirdDoseIsGiven,
		&i.FourthDoseIsGiven,
		&i.CreatedAt,
		&i.DrugorderID,
		&i.PatientID,
	)
	return i, err
}
