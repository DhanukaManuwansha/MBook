// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: drugchart.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getDrugChart = `-- name: GetDrugChart :many
SELECT DISTINCT "Drug".drug_id , "Drug".drug_name, "Drug".scientific_name, "Drug".drug_category, "Drug".storage_temperature, "Drug".dangerous_level, "Drug".manufacture , "Drug".no_of_units , "Drug".notes,d.dosage ,d.dose,d.frequency, d.givendate, d.giveuntil
FROM "Drug" INNER JOIN "DrugOrder" AS d
on "Drug".drug_id = d.drug_id 
INNER JOIN "Prescription" AS p
on p.prescription_id = d.prescription_id
WHERE p.patient_id = $1 AND p.active_status =TRUE AND d.giveuntil>=NOW() AND d.givendate<=Now()
ORDER BY "Drug".drug_id
`

type GetDrugChartRow struct {
	DrugID             int64          `json:"drug_id"`
	DrugName           string         `json:"drug_name"`
	ScientificName     sql.NullString `json:"scientific_name"`
	DrugCategory       string         `json:"drug_category"`
	StorageTemperature sql.NullString `json:"storage_temperature"`
	DangerousLevel     string         `json:"dangerous_level"`
	Manufacture        string         `json:"manufacture"`
	NoOfUnits          int32          `json:"no_of_units"`
	Notes              sql.NullString `json:"notes"`
	Dosage             string         `json:"dosage"`
	Dose               string         `json:"dose"`
	Frequency          int32          `json:"frequency"`
	Givendate          time.Time      `json:"givendate"`
	Giveuntil          time.Time      `json:"giveuntil"`
}

func (q *Queries) GetDrugChart(ctx context.Context, patientID string) ([]GetDrugChartRow, error) {
	rows, err := q.db.QueryContext(ctx, getDrugChart, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDrugChartRow
	for rows.Next() {
		var i GetDrugChartRow
		if err := rows.Scan(
			&i.DrugID,
			&i.DrugName,
			&i.ScientificName,
			&i.DrugCategory,
			&i.StorageTemperature,
			&i.DangerousLevel,
			&i.Manufacture,
			&i.NoOfUnits,
			&i.Notes,
			&i.Dosage,
			&i.Dose,
			&i.Frequency,
			&i.Givendate,
			&i.Giveuntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDrugchartForNurseDesk = `-- name: GetDrugchartForNurseDesk :many
SELECT "Drug".drug_name,"DrugOrder".dosage ,"DrugOrder".dose,"DrugOrder".frequency, "DrugOrder".givendate, "DrugOrder".giveuntil,"DrugSummery".drugsummery_id,"DrugSummery".summery_date, "DrugSummery".summery_status,"DrugSummery".first_dose_is_given,"DrugSummery".second_dose_is_given,"DrugSummery".third_dose_is_given,"DrugSummery".fourth_dose_is_given,"DrugSummery".drugorder_id,"DrugSummery".patient_id
FROM "DrugSummery" INNER JOIN "DrugOrder"
on "DrugSummery".drugorder_id = "DrugOrder".drugorder_id
Inner Join "Prescription"
on "Prescription".prescription_id = "DrugOrder".prescription_id
Inner Join "Drug"
on "Drug".drug_id = "DrugOrder".drug_id
WHERE "Prescription".patient_id=$1  AND  "Prescription".active_status=TRUE AND "DrugSummery".summery_date=$2  AND "DrugOrder".omit_status = 0
`

type GetDrugchartForNurseDeskParams struct {
	PatientID   string    `json:"patient_id"`
	SummeryDate time.Time `json:"summery_date"`
}

type GetDrugchartForNurseDeskRow struct {
	DrugName          string        `json:"drug_name"`
	Dosage            string        `json:"dosage"`
	Dose              string        `json:"dose"`
	Frequency         int32         `json:"frequency"`
	Givendate         time.Time     `json:"givendate"`
	Giveuntil         time.Time     `json:"giveuntil"`
	DrugsummeryID     int64         `json:"drugsummery_id"`
	SummeryDate       time.Time     `json:"summery_date"`
	SummeryStatus     bool          `json:"summery_status"`
	FirstDoseIsGiven  int32         `json:"first_dose_is_given"`
	SecondDoseIsGiven int32         `json:"second_dose_is_given"`
	ThirdDoseIsGiven  int32         `json:"third_dose_is_given"`
	FourthDoseIsGiven int32         `json:"fourth_dose_is_given"`
	DrugorderID       sql.NullInt64 `json:"drugorder_id"`
	PatientID         string        `json:"patient_id"`
}

func (q *Queries) GetDrugchartForNurseDesk(ctx context.Context, arg GetDrugchartForNurseDeskParams) ([]GetDrugchartForNurseDeskRow, error) {
	rows, err := q.db.QueryContext(ctx, getDrugchartForNurseDesk, arg.PatientID, arg.SummeryDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDrugchartForNurseDeskRow
	for rows.Next() {
		var i GetDrugchartForNurseDeskRow
		if err := rows.Scan(
			&i.DrugName,
			&i.Dosage,
			&i.Dose,
			&i.Frequency,
			&i.Givendate,
			&i.Giveuntil,
			&i.DrugsummeryID,
			&i.SummeryDate,
			&i.SummeryStatus,
			&i.FirstDoseIsGiven,
			&i.SecondDoseIsGiven,
			&i.ThirdDoseIsGiven,
			&i.FourthDoseIsGiven,
			&i.DrugorderID,
			&i.PatientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
