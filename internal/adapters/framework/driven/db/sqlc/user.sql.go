// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, user_name, first_name, last_name, nic, tell_no, address, user_email, user_pwd, is_email_verified, is_tell_no_verified, created_at
FROM "User"
ORDER BY "first_name"
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.Nic,
			&i.TellNo,
			&i.Address,
			&i.UserEmail,
			&i.UserPwd,
			&i.IsEmailVerified,
			&i.IsTellNoVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersByNames = `-- name: GetAllUsersByNames :many
SELECT user_id, user_name, first_name, last_name, nic, tell_no, address, user_email, user_pwd, is_email_verified, is_tell_no_verified, created_at
FROM "User" WHERE "User".user_name LIKE $1||'%' OR  "User".first_name LIKE $1||'%' OR  "User".last_name LIKE $1||'%'
`

func (q *Queries) GetAllUsersByNames(ctx context.Context, dollar_1 sql.NullString) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersByNames, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.Nic,
			&i.TellNo,
			&i.Address,
			&i.UserEmail,
			&i.UserPwd,
			&i.IsEmailVerified,
			&i.IsTellNoVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, user_name, first_name, last_name, nic, tell_no, address, user_email, user_pwd, is_email_verified, is_tell_no_verified, created_at
FROM "User"
WHERE "user_email" = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, userEmail string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, userEmail)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Nic,
		&i.TellNo,
		&i.Address,
		&i.UserEmail,
		&i.UserPwd,
		&i.IsEmailVerified,
		&i.IsTellNoVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByNIC = `-- name: GetUserByNIC :one
SELECT user_id, user_name, first_name, last_name, nic, tell_no, address, user_email, user_pwd, is_email_verified, is_tell_no_verified, created_at
FROM "User"
WHERE "nic" = $1
ORDER BY "nic"
LIMIT 1
`

func (q *Queries) GetUserByNIC(ctx context.Context, nic string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByNIC, nic)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Nic,
		&i.TellNo,
		&i.Address,
		&i.UserEmail,
		&i.UserPwd,
		&i.IsEmailVerified,
		&i.IsTellNoVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT user_id, user_name, first_name, last_name, nic, tell_no, address, user_email, user_pwd, is_email_verified, is_tell_no_verified, created_at
FROM "User" 
WHERE "user_name" = $1 
ORDER BY "user_name"
LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, userName)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Nic,
		&i.TellNo,
		&i.Address,
		&i.UserEmail,
		&i.UserPwd,
		&i.IsEmailVerified,
		&i.IsTellNoVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByTellNo = `-- name: GetUserByTellNo :one
SELECT user_id, user_name, first_name, last_name, nic, tell_no, address, user_email, user_pwd, is_email_verified, is_tell_no_verified, created_at
FROM "User"
WHERE "tell_no" = $1
LIMIT 1
`

func (q *Queries) GetUserByTellNo(ctx context.Context, tellNo string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByTellNo, tellNo)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Nic,
		&i.TellNo,
		&i.Address,
		&i.UserEmail,
		&i.UserPwd,
		&i.IsEmailVerified,
		&i.IsTellNoVerified,
		&i.CreatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO "User" ("user_id", "user_name", "first_name", "last_name", "nic", "tell_no", "address", "user_email", "user_pwd", "is_email_verified", "is_tell_no_verified")
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING "user_id"
`

type RegisterUserParams struct {
	UserID           string         `json:"user_id"`
	UserName         string         `json:"user_name"`
	FirstName        string         `json:"first_name"`
	LastName         string         `json:"last_name"`
	Nic              string         `json:"nic"`
	TellNo           string         `json:"tell_no"`
	Address          sql.NullString `json:"address"`
	UserEmail        string         `json:"user_email"`
	UserPwd          string         `json:"user_pwd"`
	IsEmailVerified  bool           `json:"is_email_verified"`
	IsTellNoVerified bool           `json:"is_tell_no_verified"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.UserID,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Nic,
		arg.TellNo,
		arg.Address,
		arg.UserEmail,
		arg.UserPwd,
		arg.IsEmailVerified,
		arg.IsTellNoVerified,
	)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "User"
SET "user_name" = $2, "first_name" = $3 ,"last_name" = $4, "nic" = $5 , "tell_no" =$6 , "address" =$7 , "user_email" =$8 , "user_pwd" =$9, "is_email_verified" =$10, "is_tell_no_verified"=$11
WHERE "user_id" = $1
RETURNING user_id, user_name, first_name, last_name, nic, tell_no, address, user_email, user_pwd, is_email_verified, is_tell_no_verified, created_at
`

type UpdateUserParams struct {
	UserID           string         `json:"user_id"`
	UserName         string         `json:"user_name"`
	FirstName        string         `json:"first_name"`
	LastName         string         `json:"last_name"`
	Nic              string         `json:"nic"`
	TellNo           string         `json:"tell_no"`
	Address          sql.NullString `json:"address"`
	UserEmail        string         `json:"user_email"`
	UserPwd          string         `json:"user_pwd"`
	IsEmailVerified  bool           `json:"is_email_verified"`
	IsTellNoVerified bool           `json:"is_tell_no_verified"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserID,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Nic,
		arg.TellNo,
		arg.Address,
		arg.UserEmail,
		arg.UserPwd,
		arg.IsEmailVerified,
		arg.IsTellNoVerified,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Nic,
		&i.TellNo,
		&i.Address,
		&i.UserEmail,
		&i.UserPwd,
		&i.IsEmailVerified,
		&i.IsTellNoVerified,
		&i.CreatedAt,
	)
	return i, err
}
