// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: bed.sql

package db

import (
	"context"
)

const getBedsByWard = `-- name: GetBedsByWard :many
SELECT "bedTicket_id","bed_no","patient_id"  FROM "BedTicket"
WHERE "ward_id" = $1
ORDER BY "bedTicket_id"
`

type GetBedsByWardRow struct {
	BedTicketID int64  `json:"bedTicket_id"`
	BedNo       int32  `json:"bed_no"`
	PatientID   string `json:"patient_id"`
}

func (q *Queries) GetBedsByWard(ctx context.Context, wardID int64) ([]GetBedsByWardRow, error) {
	rows, err := q.db.QueryContext(ctx, getBedsByWard, wardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBedsByWardRow
	for rows.Next() {
		var i GetBedsByWardRow
		if err := rows.Scan(&i.BedTicketID, &i.BedNo, &i.PatientID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientsIdByWard = `-- name: GetPatientsIdByWard :many
SELECT "patient_id" FROM "BedTicket"
WHERE "ward_id" = $1
`

func (q *Queries) GetPatientsIdByWard(ctx context.Context, wardID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPatientsIdByWard, wardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var patient_id string
		if err := rows.Scan(&patient_id); err != nil {
			return nil, err
		}
		items = append(items, patient_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
