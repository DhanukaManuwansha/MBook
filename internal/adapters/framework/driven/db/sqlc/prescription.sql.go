// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: prescription.sql

package db

import (
	"context"
)

const getActivePrescriptions = `-- name: GetActivePrescriptions :many
SELECT prescription_id, pres_date, pres_time, active_status, notes, sketch, created_at, patient_id, doctor_id FROM "Prescription" 
WHERE "patient_id" = $1 And "active_status"= TRUE
`

func (q *Queries) GetActivePrescriptions(ctx context.Context, patientID string) ([]Prescription, error) {
	rows, err := q.db.QueryContext(ctx, getActivePrescriptions, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prescription
	for rows.Next() {
		var i Prescription
		if err := rows.Scan(
			&i.PrescriptionID,
			&i.PresDate,
			&i.PresTime,
			&i.ActiveStatus,
			&i.Notes,
			&i.Sketch,
			&i.CreatedAt,
			&i.PatientID,
			&i.DoctorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestPrescriptions = `-- name: GetLatestPrescriptions :many
SELECT prescription_id, pres_date, pres_time, active_status, notes, sketch, created_at, patient_id, doctor_id
FROM "Prescription" 
WHERE "patient_id" = $1
ORDER BY "created_at" DESC
`

func (q *Queries) GetLatestPrescriptions(ctx context.Context, patientID string) ([]Prescription, error) {
	rows, err := q.db.QueryContext(ctx, getLatestPrescriptions, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prescription
	for rows.Next() {
		var i Prescription
		if err := rows.Scan(
			&i.PrescriptionID,
			&i.PresDate,
			&i.PresTime,
			&i.ActiveStatus,
			&i.Notes,
			&i.Sketch,
			&i.CreatedAt,
			&i.PatientID,
			&i.DoctorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
