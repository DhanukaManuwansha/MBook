// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: patient.sql

package patientdb

import (
	"context"
)

const getPatientBYNIC = `-- name: GetPatientBYNIC :many
SELECT patient_id, nic, first_name, middle_name, last_name, dob, address_line_one, address_line_two, city, state, country, tell_no, email, password, sex, height, weight, blood_group, marital_state, occupation, nationality, family_id FROM "Patient" 
WHERE "nic"= $1
`

func (q *Queries) GetPatientBYNIC(ctx context.Context, nic string) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, getPatientBYNIC, nic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.PatientID,
			&i.Nic,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Dob,
			&i.AddressLineOne,
			&i.AddressLineTwo,
			&i.City,
			&i.State,
			&i.Country,
			&i.TellNo,
			&i.Email,
			&i.Password,
			&i.Sex,
			&i.Height,
			&i.Weight,
			&i.BloodGroup,
			&i.MaritalState,
			&i.Occupation,
			&i.Nationality,
			&i.FamilyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientBYName = `-- name: GetPatientBYName :many
SELECT patient_id, nic, first_name, middle_name, last_name, dob, address_line_one, address_line_two, city, state, country, tell_no, email, password, sex, height, weight, blood_group, marital_state, occupation, nationality, family_id FROM "Patient" 
WHERE "first_name" = $1 OR "middle_name" =$1 OR "last_name" = $1
`

func (q *Queries) GetPatientBYName(ctx context.Context, firstName string) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, getPatientBYName, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.PatientID,
			&i.Nic,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Dob,
			&i.AddressLineOne,
			&i.AddressLineTwo,
			&i.City,
			&i.State,
			&i.Country,
			&i.TellNo,
			&i.Email,
			&i.Password,
			&i.Sex,
			&i.Height,
			&i.Weight,
			&i.BloodGroup,
			&i.MaritalState,
			&i.Occupation,
			&i.Nationality,
			&i.FamilyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientBYTellNo = `-- name: GetPatientBYTellNo :many
SELECT patient_id, nic, first_name, middle_name, last_name, dob, address_line_one, address_line_two, city, state, country, tell_no, email, password, sex, height, weight, blood_group, marital_state, occupation, nationality, family_id FROM "Patient" 
WHERE "tell_no"= $1
`

func (q *Queries) GetPatientBYTellNo(ctx context.Context, tellNo string) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, getPatientBYTellNo, tellNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.PatientID,
			&i.Nic,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Dob,
			&i.AddressLineOne,
			&i.AddressLineTwo,
			&i.City,
			&i.State,
			&i.Country,
			&i.TellNo,
			&i.Email,
			&i.Password,
			&i.Sex,
			&i.Height,
			&i.Weight,
			&i.BloodGroup,
			&i.MaritalState,
			&i.Occupation,
			&i.Nationality,
			&i.FamilyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientById = `-- name: GetPatientById :one
SELECT patient_id, nic, first_name, middle_name, last_name, dob, address_line_one, address_line_two, city, state, country, tell_no, email, password, sex, height, weight, blood_group, marital_state, occupation, nationality, family_id FROM "Patient" 
WHERE "patient_id"= $1
LIMIT 1
`

func (q *Queries) GetPatientById(ctx context.Context, patientID string) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatientById, patientID)
	var i Patient
	err := row.Scan(
		&i.PatientID,
		&i.Nic,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.AddressLineOne,
		&i.AddressLineTwo,
		&i.City,
		&i.State,
		&i.Country,
		&i.TellNo,
		&i.Email,
		&i.Password,
		&i.Sex,
		&i.Height,
		&i.Weight,
		&i.BloodGroup,
		&i.MaritalState,
		&i.Occupation,
		&i.Nationality,
		&i.FamilyID,
	)
	return i, err
}

const getPatients = `-- name: GetPatients :many
SELECT patient_id, nic, first_name, middle_name, last_name, dob, address_line_one, address_line_two, city, state, country, tell_no, email, password, sex, height, weight, blood_group, marital_state, occupation, nationality, family_id FROM "Patient"
`

func (q *Queries) GetPatients(ctx context.Context) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, getPatients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.PatientID,
			&i.Nic,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Dob,
			&i.AddressLineOne,
			&i.AddressLineTwo,
			&i.City,
			&i.State,
			&i.Country,
			&i.TellNo,
			&i.Email,
			&i.Password,
			&i.Sex,
			&i.Height,
			&i.Weight,
			&i.BloodGroup,
			&i.MaritalState,
			&i.Occupation,
			&i.Nationality,
			&i.FamilyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
