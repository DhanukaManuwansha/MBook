// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: drugorder.sql

package db

import (
	"context"
)

const getDrugOrdersByPrescriptionID = `-- name: GetDrugOrdersByPrescriptionID :many
SELECT drugorder_id, dose, dosage, givendate, giveuntil, route, frequency, dosaage_time, drug_status, drug_id, omit_status, patient_id, prescription_id, session_id, doctor_id FROM "DrugOrder" 
WHERE "prescription_id" = $1 And "giveuntil">=NOW() AND "givendate"<=Now()
`

func (q *Queries) GetDrugOrdersByPrescriptionID(ctx context.Context, prescriptionID int64) ([]DrugOrder, error) {
	rows, err := q.db.QueryContext(ctx, getDrugOrdersByPrescriptionID, prescriptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DrugOrder
	for rows.Next() {
		var i DrugOrder
		if err := rows.Scan(
			&i.DrugorderID,
			&i.Dose,
			&i.Dosage,
			&i.Givendate,
			&i.Giveuntil,
			&i.Route,
			&i.Frequency,
			&i.DosaageTime,
			&i.DrugStatus,
			&i.DrugID,
			&i.OmitStatus,
			&i.PatientID,
			&i.PrescriptionID,
			&i.SessionID,
			&i.DoctorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
