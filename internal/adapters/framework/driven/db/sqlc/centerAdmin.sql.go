// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: centerAdmin.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getAllCenterAdmins = `-- name: GetAllCenterAdmins :many
SELECT "centerAdmin_id", "center_id", ca.user_id, "user_name", "first_name", "last_name", "nic", "tell_no", "address", "user_email", "user_pwd", "is_email_verified", "is_tell_no_verified", "created_at"
FROM "CenterAdmin" AS "ca"
    INNER JOIN 
    "User" AS "u"
    ON ca.user_id = u.user_id
WHERE "center_id" = $1
ORDER BY "centerAdmin_id"
LIMIT 10
`

type GetAllCenterAdminsRow struct {
	CenterAdminID    int64          `json:"centerAdmin_id"`
	CenterID         int64          `json:"center_id"`
	UserID           string         `json:"user_id"`
	UserName         string         `json:"user_name"`
	FirstName        string         `json:"first_name"`
	LastName         string         `json:"last_name"`
	Nic              string         `json:"nic"`
	TellNo           string         `json:"tell_no"`
	Address          sql.NullString `json:"address"`
	UserEmail        string         `json:"user_email"`
	UserPwd          string         `json:"user_pwd"`
	IsEmailVerified  bool           `json:"is_email_verified"`
	IsTellNoVerified bool           `json:"is_tell_no_verified"`
	CreatedAt        time.Time      `json:"created_at"`
}

func (q *Queries) GetAllCenterAdmins(ctx context.Context, centerID int64) ([]GetAllCenterAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCenterAdmins, centerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCenterAdminsRow
	for rows.Next() {
		var i GetAllCenterAdminsRow
		if err := rows.Scan(
			&i.CenterAdminID,
			&i.CenterID,
			&i.UserID,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.Nic,
			&i.TellNo,
			&i.Address,
			&i.UserEmail,
			&i.UserPwd,
			&i.IsEmailVerified,
			&i.IsTellNoVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCenterAdminsByName = `-- name: GetAllCenterAdminsByName :many
SELECT "centerAdmin_id", "center_id", ca.user_id, "user_name", "first_name", "last_name", "nic", "tell_no", "address", "user_email", "user_pwd", "is_email_verified", "is_tell_no_verified", "created_at"
FROM "CenterAdmin" AS "ca"
    INNER JOIN
    "User" AS "u"
    ON ca.user_id = u.user_id
WHERE "center_id" = $1 AND ("u".user_name LIKE $2||'%' OR  "u".first_name LIKE $2||'%' OR  "u".last_name LIKE $2||'%')
ORDER BY "centerAdmin_id"
`

type GetAllCenterAdminsByNameParams struct {
	CenterID int64          `json:"center_id"`
	Column2  sql.NullString `json:"column_2"`
}

type GetAllCenterAdminsByNameRow struct {
	CenterAdminID    int64          `json:"centerAdmin_id"`
	CenterID         int64          `json:"center_id"`
	UserID           string         `json:"user_id"`
	UserName         string         `json:"user_name"`
	FirstName        string         `json:"first_name"`
	LastName         string         `json:"last_name"`
	Nic              string         `json:"nic"`
	TellNo           string         `json:"tell_no"`
	Address          sql.NullString `json:"address"`
	UserEmail        string         `json:"user_email"`
	UserPwd          string         `json:"user_pwd"`
	IsEmailVerified  bool           `json:"is_email_verified"`
	IsTellNoVerified bool           `json:"is_tell_no_verified"`
	CreatedAt        time.Time      `json:"created_at"`
}

func (q *Queries) GetAllCenterAdminsByName(ctx context.Context, arg GetAllCenterAdminsByNameParams) ([]GetAllCenterAdminsByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCenterAdminsByName, arg.CenterID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCenterAdminsByNameRow
	for rows.Next() {
		var i GetAllCenterAdminsByNameRow
		if err := rows.Scan(
			&i.CenterAdminID,
			&i.CenterID,
			&i.UserID,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.Nic,
			&i.TellNo,
			&i.Address,
			&i.UserEmail,
			&i.UserPwd,
			&i.IsEmailVerified,
			&i.IsTellNoVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerCenterAdmin = `-- name: RegisterCenterAdmin :one
INSERT INTO "CenterAdmin" ("user_id", "center_id")
VALUES ($1, $2)
RETURNING "centerAdmin_id", "user_id"
`

type RegisterCenterAdminParams struct {
	UserID   string `json:"user_id"`
	CenterID int64  `json:"center_id"`
}

type RegisterCenterAdminRow struct {
	CenterAdminID int64  `json:"centerAdmin_id"`
	UserID        string `json:"user_id"`
}

func (q *Queries) RegisterCenterAdmin(ctx context.Context, arg RegisterCenterAdminParams) (RegisterCenterAdminRow, error) {
	row := q.db.QueryRowContext(ctx, registerCenterAdmin, arg.UserID, arg.CenterID)
	var i RegisterCenterAdminRow
	err := row.Scan(&i.CenterAdminID, &i.UserID)
	return i, err
}
