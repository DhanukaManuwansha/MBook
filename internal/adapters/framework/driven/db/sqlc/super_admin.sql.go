// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: super_admin.sql

package db

import (
	"context"
)

const getSuperAdmins = `-- name: GetSuperAdmins :many
SELECT superAdmin_id, user_id FROM "SuperAdmin"
ORDER BY "superAdmin_id"
`

func (q *Queries) GetSuperAdmins(ctx context.Context) ([]SuperAdmin, error) {
	rows, err := q.db.QueryContext(ctx, getSuperAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SuperAdmin
	for rows.Next() {
		var i SuperAdmin
		if err := rows.Scan(&i.SuperAdminID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerSuperAdmin = `-- name: RegisterSuperAdmin :one
INSERT INTO "SuperAdmin" ("user_id") 
VALUES ($1)
RETURNING "superAdmin_id", "user_id"
`

func (q *Queries) RegisterSuperAdmin(ctx context.Context, userID string) (SuperAdmin, error) {
	row := q.db.QueryRowContext(ctx, registerSuperAdmin, userID)
	var i SuperAdmin
	err := row.Scan(&i.SuperAdminID, &i.UserID)
	return i, err
}
