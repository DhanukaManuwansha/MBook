// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: doctor.sql

package db

import (
	"context"
	"time"
)

const getUserByRegNumber = `-- name: GetUserByRegNumber :one
SELECT doctor_id, reg_number, dob, user_id
FROM "Doctor"
WHERE "reg_number" = $1
LIMIT 1
`

func (q *Queries) GetUserByRegNumber(ctx context.Context, regNumber string) (Doctor, error) {
	row := q.db.QueryRowContext(ctx, getUserByRegNumber, regNumber)
	var i Doctor
	err := row.Scan(
		&i.DoctorID,
		&i.RegNumber,
		&i.Dob,
		&i.UserID,
	)
	return i, err
}

const registerDoctor = `-- name: RegisterDoctor :one
INSERT INTO "Doctor" ("reg_number", "dob", "user_id")
VALUES ($1, $2, $3)
RETURNING "doctor_id", "reg_number", "user_id"
`

type RegisterDoctorParams struct {
	RegNumber string    `json:"reg_number"`
	Dob       time.Time `json:"dob"`
	UserID    string    `json:"user_id"`
}

type RegisterDoctorRow struct {
	DoctorID  int64  `json:"doctor_id"`
	RegNumber string `json:"reg_number"`
	UserID    string `json:"user_id"`
}

func (q *Queries) RegisterDoctor(ctx context.Context, arg RegisterDoctorParams) (RegisterDoctorRow, error) {
	row := q.db.QueryRowContext(ctx, registerDoctor, arg.RegNumber, arg.Dob, arg.UserID)
	var i RegisterDoctorRow
	err := row.Scan(&i.DoctorID, &i.RegNumber, &i.UserID)
	return i, err
}
